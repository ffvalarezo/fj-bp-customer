<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/movement-service/src/main/java/com/pichincha/movement/repository/MovementRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/movement-service/src/main/java/com/pichincha/movement/repository/MovementRepository.java" />
              <option name="originalContent" value="package com.pichincha.movement.repository;&#10;&#10;import org.springframework.data.repository.reactive.ReactiveCrudRepository;&#10;&#10;import com.pichincha.common.infrastructure.input.adapter.rest.models.MovementResponse;&#10;import com.pichincha.movement.domain.MovementEntity;&#10;&#10;import reactor.core.publisher.Flux;&#10;&#10;public interface MovementRepository extends ReactiveCrudRepository&lt;MovementEntity, Long&gt; {&#10;&#10;&#9;Flux&lt;MovementResponse&gt; findByAccountNumber(String accountNumber);&#10;}" />
              <option name="updatedContent" value="package com.pichincha.movement.repository;&#10;&#10;import org.springframework.data.repository.reactive.ReactiveCrudRepository;&#10;&#10;import com.pichincha.movement.domain.MovementEntity;&#10;&#10;import reactor.core.publisher.Flux;&#10;&#10;public interface MovementRepository extends ReactiveCrudRepository&lt;MovementEntity, Long&gt; {&#10;&#10;&#9;Flux&lt;MovementEntity&gt; findByAccountNumber(String accountNumber);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/movement-service/src/main/java/com/pichincha/movement/service/impl/MovementQueryServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/movement-service/src/main/java/com/pichincha/movement/service/impl/MovementQueryServiceImpl.java" />
              <option name="originalContent" value="package com.pichincha.movement.service.impl;&#10;&#10;import org.springframework.stereotype.Service;&#10;&#10;import com.pichincha.common.infrastructure.input.adapter.rest.models.MovementResponse;&#10;import com.pichincha.movement.repository.MovementRepository;&#10;import com.pichincha.movement.service.MovementQueryService;&#10;import com.pichincha.movement.service.mapper.MovementMapper;&#10;&#10;import reactor.core.publisher.Flux;&#10;import reactor.core.publisher.Mono;&#10;&#10;@Service&#10;public class MovementQueryServiceImpl implements MovementQueryService {&#10;&#10;  private final MovementRepository movementRepository;&#10;  private final MovementMapper movementMapper;&#10;&#10;  public MovementQueryServiceImpl(MovementRepository movementRepository, MovementMapper movementMapper) {&#10;    this.movementRepository = movementRepository;&#10;    this.movementMapper = movementMapper;&#10;  }&#10;&#10;&#9;@Override&#10;&#9;public Mono&lt;MovementResponse&gt; getMovementById(Integer id) {&#10;&#9;&#9;return movementRepository.findById(Long.valueOf(id)).map(movementMapper::toDto)&#10;&#9;&#9;&#9;&#9;.switchIfEmpty(Mono.error(new RuntimeException(&quot;Movement not found&quot;)));&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public Flux&lt;MovementResponse&gt; getAllMovements() {&#10;&#9;&#9;return movementRepository.findAll().map(movementMapper::toDto);&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public Flux&lt;MovementResponse&gt; getMovementsByAccountNumber(Long accountNumber) {&#10;&#9;&#9;return movementRepository.findByAccountNumber(accountNumber);&#10;&#9;}&#10;}" />
              <option name="updatedContent" value="package com.pichincha.movement.service.impl;&#13;&#10;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;&#13;&#10;import com.pichincha.common.infrastructure.input.adapter.rest.models.MovementResponse;&#13;&#10;import com.pichincha.movement.repository.MovementRepository;&#13;&#10;import com.pichincha.movement.service.MovementQueryService;&#13;&#10;import com.pichincha.movement.service.mapper.MovementMapper;&#13;&#10;&#13;&#10;import reactor.core.publisher.Flux;&#13;&#10;import reactor.core.publisher.Mono;&#13;&#10;&#13;&#10;@Service&#13;&#10;public class MovementQueryServiceImpl implements MovementQueryService {&#13;&#10;&#13;&#10;  private final MovementRepository movementRepository;&#13;&#10;  private final MovementMapper movementMapper;&#13;&#10;&#13;&#10;  public MovementQueryServiceImpl(MovementRepository movementRepository, MovementMapper movementMapper) {&#13;&#10;    this.movementRepository = movementRepository;&#13;&#10;    this.movementMapper = movementMapper;&#13;&#10;  }&#13;&#10;&#13;&#10;&#9;@Override&#13;&#10;&#9;public Mono&lt;MovementResponse&gt; getMovementById(Integer id) {&#13;&#10;&#9;&#9;return movementRepository.findById(Long.valueOf(id)).map(movementMapper::toDto)&#13;&#10;&#9;&#9;&#9;&#9;.switchIfEmpty(Mono.error(new RuntimeException(&quot;Movement not found&quot;)));&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;@Override&#13;&#10;&#9;public Flux&lt;MovementResponse&gt; getAllMovements() {&#13;&#10;&#9;&#9;return movementRepository.findAll().map(movementMapper::toDto);&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;@Override&#13;&#10;&#9;public Flux&lt;MovementResponse&gt; getMovementsByAccountNumber(Long accountNumber) {&#13;&#10;&#9;&#9;return movementRepository.findByAccountNumber(accountNumber).map(movementMapper::toDto);&#13;&#10;&#9;}&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/movement-service/src/test/java/com/pichincha/movement/service/impl/MovementQueryServiceImplTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/movement-service/src/test/java/com/pichincha/movement/service/impl/MovementQueryServiceImplTest.java" />
              <option name="originalContent" value="package com.pichincha.movement.service.impl;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertEquals;&#10;import static org.mockito.Mockito.times;&#10;import static org.mockito.Mockito.verify;&#10;import static org.mockito.Mockito.when;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.time.ZoneOffset;&#10;import java.util.List;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;&#10;import com.pichincha.common.infrastructure.input.adapter.rest.models.MovementResponse;&#10;import com.pichincha.movement.domain.MovementEntity;&#10;import com.pichincha.movement.domain.model.MovementType;&#10;import com.pichincha.movement.repository.MovementRepository;&#10;import com.pichincha.movement.service.mapper.MovementMapper;&#10;&#10;import reactor.core.publisher.Flux;&#10;&#10;class MovementQueryServiceImplTest {&#10;&#10;&#9;@Mock&#10;&#9;private MovementMapper movementMapper;&#10;&#10;&#9;@Mock&#10;&#9;private MovementRepository movementRepository;&#10;&#10;&#9;@InjectMocks&#10;&#9;private MovementQueryServiceImpl movementQueryService;&#10;&#10;&#9;@BeforeEach&#10;&#9;void setUp() {&#10;&#9;&#9;MockitoAnnotations.openMocks(this);&#10;&#9;}&#10;&#10;&#9;@Test&#10;&#9;void shouldMapMovementsCorrectly() {&#10;&#9;&#9;MovementEntity movement = new MovementEntity();&#10;&#9;&#9;movement.setId(1L);&#10;&#9;&#9;movement.setDate(LocalDateTime.now());&#10;&#9;&#9;movement.setBalance(BigDecimal.valueOf(100.0));&#10;&#9;&#9;movement.setAccountNumber(&quot;1234567890&quot;);&#10;&#9;&#9;movement.setMovementType(MovementType.DEBIT);&#10;&#10;&#9;&#9;MovementResponse expectedResponse = new MovementResponse();&#10;&#9;&#9;expectedResponse.setDate(LocalDateTime.now().atOffset(ZoneOffset.UTC));&#10;&#9;&#9;expectedResponse.setAccountNumber(&quot;1234567890&quot;);&#10;&#9;&#9;expectedResponse.setType(&quot;DEBIT&quot;);&#10;&#9;&#9;expectedResponse.setBalance(BigDecimal.valueOf(100.0));&#10;&#10;&#9;&#9;when(movementRepository.findByAccountNumber(&quot;1234567890&quot;)).thenReturn(Flux.just(movement));&#10;&#9;&#9;when(movementMapper.toDto(movement)).thenReturn(expectedResponse);&#10;&#10;&#9;&#9;List&lt;MovementResponse&gt; responses = movementQueryService.getMovementsByAccountNumber(&quot;1234567890&quot;).collectList().block();&#10;&#10;&#9;&#9;assertEquals(1, responses.size());&#10;&#9;&#9;assertEquals(expectedResponse, responses.get(0));&#10;&#9;&#9;verify(movementRepository, times(1)).findByAccountNumber(&quot;1234567890&quot;);&#10;&#9;&#9;verify(movementMapper, times(1)).toDto(movement);&#10;&#9;}&#10;}" />
              <option name="updatedContent" value="package com.pichincha.movement.service.impl;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertEquals;&#10;import static org.mockito.Mockito.times;&#10;import static org.mockito.Mockito.verify;&#10;import static org.mockito.Mockito.when;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.time.ZoneOffset;&#10;import java.util.List;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;&#10;import com.pichincha.common.infrastructure.input.adapter.rest.models.MovementResponse;&#10;import com.pichincha.movement.domain.MovementEntity;&#10;import com.pichincha.movement.domain.model.MovementType;&#10;import com.pichincha.movement.repository.MovementRepository;&#10;import com.pichincha.movement.service.mapper.MovementMapper;&#10;&#10;import reactor.core.publisher.Flux;&#10;&#10;class MovementQueryServiceImplTest {&#10;&#10;&#9;@Mock&#10;&#9;private MovementMapper movementMapper;&#10;&#10;&#9;@Mock&#10;&#9;private MovementRepository movementRepository;&#10;&#10;&#9;@InjectMocks&#10;&#9;private MovementQueryServiceImpl movementQueryService;&#10;&#10;&#9;@BeforeEach&#10;&#9;void setUp() {&#10;&#9;&#9;MockitoAnnotations.openMocks(this);&#10;&#9;}&#10;&#10;&#9;@Test&#10;&#9;void shouldMapMovementsCorrectly() {&#10;&#9;&#9;MovementEntity movement = new MovementEntity();&#10;&#9;&#9;movement.setId(1L);&#10;&#9;&#9;movement.setDate(LocalDateTime.now());&#10;&#9;&#9;movement.setBalance(BigDecimal.valueOf(100.0));&#10;&#9;&#9;movement.setAccountNumber(&quot;1234567890&quot;);&#10;&#9;&#9;movement.setMovementType(MovementType.DEBIT);&#10;&#10;&#9;&#9;MovementResponse expectedResponse = new MovementResponse();&#10;&#9;&#9;expectedResponse.setDate(LocalDateTime.now().atOffset(ZoneOffset.UTC));&#10;&#9;&#9;expectedResponse.setAccountNumber(&quot;1234567890&quot;);&#10;&#9;&#9;expectedResponse.setType(&quot;DEBIT&quot;);&#10;&#9;&#9;expectedResponse.setBalance(BigDecimal.valueOf(100.0));&#10;&#10;&#9;&#9;when(movementRepository.findByAccountNumber(&quot;1234567890&quot;)).thenReturn(Flux.just(movement));&#10;&#9;&#9;when(movementMapper.toDto(movement)).thenReturn(expectedResponse);&#10;&#10;&#9;&#9;List&lt;MovementResponse&gt; responses = movementQueryService.getMovementsByAccountNumber(&quot;1234567890&quot;).collectList().block();&#10;&#10;&#9;&#9;assertEquals(1, responses.size());&#10;&#9;&#9;assertEquals(expectedResponse, responses.get(0));&#10;&#9;&#9;verify(movementRepository, times(1)).findByAccountNumber(&quot;1234567890&quot;);&#10;&#9;&#9;verify(movementMapper, times(1)).toDto(movement);&#10;&#9;}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/movement-service/src/test/java/com/pichincha/movement/service/mapper/MovementMapperTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/movement-service/src/test/java/com/pichincha/movement/service/mapper/MovementMapperTest.java" />
              <option name="originalContent" value="package com.pichincha.movement.service.mapper;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertEquals;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.time.OffsetDateTime;&#10;import java.time.ZoneOffset;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.mapstruct.factory.Mappers;&#10;&#10;import com.pichincha.common.infrastructure.input.adapter.rest.models.MovementResponse;&#10;import com.pichincha.movement.domain.MovementEntity;&#10;import com.pichincha.movement.domain.model.MovementType;&#10;&#10;class MovementMapperTest {&#10;&#10;&#9;private final MovementMapper mapper = Mappers.getMapper(MovementMapper.class);&#10;&#10;&#9;@Test&#10;&#9;void testToDto() {&#10;&#9;&#9;MovementEntity entity = new MovementEntity();&#10;&#9;&#9;entity.setId(1L);&#10;&#9;&#9;entity.setDate(LocalDateTime.of(2025, 7, 22, 10, 0));&#10;&#9;&#9;entity.setMovementType(MovementType.CREDIT);&#10;&#9;&#9;entity.setValue(BigDecimal.valueOf(1600.0));&#10;&#9;&#9;entity.setBalance(BigDecimal.valueOf(200.0));&#10;&#9;&#9;entity.setAccountNumber(&quot;1234567890&quot;);&#10;&#10;&#9;&#9;MovementResponse response = mapper.toDto(entity);&#10;&#10;&#9;&#9;assertEquals(OffsetDateTime.of(2025, 7, 22, 10, 0, 0, 0, ZoneOffset.UTC), response.getDate());&#10;&#9;&#9;assertEquals(MovementType.CREDIT, response.getType());&#10;&#9;&#9;assertEquals(BigDecimal.valueOf(1600.0), response.getValue());&#10;&#9;&#9;assertEquals(BigDecimal.valueOf(200.0), response.getBalance());&#10;&#9;&#9;assertEquals(&quot;1234567890&quot;, response.getAccountNumber());&#10;&#9;}&#10;}" />
              <option name="updatedContent" value="package com.pichincha.movement.service.mapper;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertEquals;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.time.OffsetDateTime;&#10;import java.time.ZoneOffset;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.mapstruct.factory.Mappers;&#10;&#10;import com.pichincha.common.infrastructure.input.adapter.rest.models.MovementResponse;&#10;import com.pichincha.movement.domain.MovementEntity;&#10;import com.pichincha.movement.domain.model.MovementType;&#10;&#10;class MovementMapperTest {&#10;&#10;&#9;private final MovementMapper mapper = Mappers.getMapper(MovementMapper.class);&#10;&#10;&#9;@Test&#10;&#9;void testToDto() {&#10;&#9;&#9;MovementEntity entity = new MovementEntity();&#10;&#9;&#9;entity.setId(1L);&#10;&#9;&#9;entity.setDate(LocalDateTime.of(2025, 7, 22, 10, 0));&#10;&#9;&#9;entity.setMovementType(MovementType.CREDIT);&#10;&#9;&#9;entity.setValue(BigDecimal.valueOf(1600.0));&#10;&#9;&#9;entity.setBalance(BigDecimal.valueOf(200.0));&#10;&#9;&#9;entity.setAccountNumber(&quot;1234567890&quot;);&#10;&#10;&#9;&#9;MovementResponse response = mapper.toDto(entity);&#10;&#10;&#9;&#9;assertEquals(OffsetDateTime.of(2025, 7, 22, 10, 0, 0, 0, ZoneOffset.UTC), response.getDate());&#10;&#9;&#9;assertEquals(&quot;CREDIT&quot;, response.getType());&#10;&#9;&#9;assertEquals(BigDecimal.valueOf(1600.0), response.getValue());&#10;&#9;&#9;assertEquals(BigDecimal.valueOf(200.0), response.getBalance());&#10;&#9;&#9;assertEquals(&quot;1234567890&quot;, response.getAccountNumber());&#10;&#9;}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>