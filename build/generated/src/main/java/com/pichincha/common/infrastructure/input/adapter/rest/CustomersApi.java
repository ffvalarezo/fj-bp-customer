/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pichincha.common.infrastructure.input.adapter.rest;

import com.pichincha.common.infrastructure.input.adapter.rest.models.Customer;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-19T23:36:54.713791100-05:00[America/Guayaquil]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Customers", description = "Operations related to customer management")
public interface CustomersApi {

    /**
     * POST /customers : Create a new customer
     *
     * @param xGuid  (required)
     * @param xChannel  (required)
     * @param xMedium  (required)
     * @param xApp  (required)
     * @param xSession  (required)
     * @param customer Customer to be created (required)
     * @return Customer created successfully (status code 201)
     */
    @Operation(
        operationId = "createCustomer",
        summary = "Create a new customer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Customer created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    Mono<ResponseEntity<Customer>> createCustomer(
        @NotNull @Pattern(regexp = "^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$") @Size(max = 60) @Parameter(name = "x-guid", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-guid", required = true) String xGuid,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 2) @Parameter(name = "x-channel", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-channel", required = true) String xChannel,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 2) @Parameter(name = "x-medium", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-medium", required = true) String xMedium,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 5) @Parameter(name = "x-app", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-app", required = true) String xApp,
        @NotNull @Size(max = 100) @Parameter(name = "x-session", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-session", required = true) String xSession,
        @Parameter(name = "Customer", description = "Customer to be created", required = true) @Valid @RequestBody Mono<Customer> customer,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * DELETE /customers/{id} : Delete customer by ID
     *
     * @param id  (required)
     * @param xGuid  (required)
     * @param xChannel  (required)
     * @param xMedium  (required)
     * @param xApp  (required)
     * @param xSession  (required)
     * @return Customer deleted successfully (status code 204)
     *         or Customer not found (status code 404)
     */
    @Operation(
        operationId = "deleteCustomer",
        summary = "Delete customer by ID",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Customer deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Customer not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/customers/{id}"
    )
    
    Mono<ResponseEntity<Void>> deleteCustomer(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @NotNull @Pattern(regexp = "^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$") @Size(max = 60) @Parameter(name = "x-guid", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-guid", required = true) String xGuid,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 2) @Parameter(name = "x-channel", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-channel", required = true) String xChannel,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 2) @Parameter(name = "x-medium", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-medium", required = true) String xMedium,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 5) @Parameter(name = "x-app", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-app", required = true) String xApp,
        @NotNull @Size(max = 100) @Parameter(name = "x-session", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-session", required = true) String xSession,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * GET /customers : Retrieve all customers
     *
     * @param xGuid  (required)
     * @param xChannel  (required)
     * @param xMedium  (required)
     * @param xApp  (required)
     * @param xSession  (required)
     * @return A list of customers (status code 200)
     */
    @Operation(
        operationId = "getAllCustomers",
        summary = "Retrieve all customers",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of customers", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Customer.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers",
        produces = { "application/json" }
    )
    
    Mono<ResponseEntity<Flux<Customer>>> getAllCustomers(
        @NotNull @Pattern(regexp = "^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$") @Size(max = 60) @Parameter(name = "x-guid", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-guid", required = true) String xGuid,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 2) @Parameter(name = "x-channel", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-channel", required = true) String xChannel,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 2) @Parameter(name = "x-medium", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-medium", required = true) String xMedium,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 5) @Parameter(name = "x-app", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-app", required = true) String xApp,
        @NotNull @Size(max = 100) @Parameter(name = "x-session", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-session", required = true) String xSession,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * GET /customers/{id} : Get customer by ID
     *
     * @param id  (required)
     * @param xGuid  (required)
     * @param xChannel  (required)
     * @param xMedium  (required)
     * @param xApp  (required)
     * @param xSession  (required)
     * @return Customer found (status code 200)
     *         or Customer not found (status code 404)
     */
    @Operation(
        operationId = "getCustomerById",
        summary = "Get customer by ID",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Customer found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "404", description = "Customer not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers/{id}",
        produces = { "application/json" }
    )
    
    Mono<ResponseEntity<Customer>> getCustomerById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @NotNull @Pattern(regexp = "^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$") @Size(max = 60) @Parameter(name = "x-guid", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-guid", required = true) String xGuid,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 2) @Parameter(name = "x-channel", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-channel", required = true) String xChannel,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 2) @Parameter(name = "x-medium", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-medium", required = true) String xMedium,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 5) @Parameter(name = "x-app", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-app", required = true) String xApp,
        @NotNull @Size(max = 100) @Parameter(name = "x-session", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-session", required = true) String xSession,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * PUT /customers/{id} : Update an existing customer
     *
     * @param id  (required)
     * @param xGuid  (required)
     * @param xChannel  (required)
     * @param xMedium  (required)
     * @param xApp  (required)
     * @param xSession  (required)
     * @param customer Customer data to update (required)
     * @return Customer updated (status code 200)
     *         or Customer not found (status code 404)
     */
    @Operation(
        operationId = "updateCustomer",
        summary = "Update an existing customer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Customer updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "404", description = "Customer not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/customers/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    Mono<ResponseEntity<Customer>> updateCustomer(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @NotNull @Pattern(regexp = "^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$") @Size(max = 60) @Parameter(name = "x-guid", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-guid", required = true) String xGuid,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 2) @Parameter(name = "x-channel", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-channel", required = true) String xChannel,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 2) @Parameter(name = "x-medium", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-medium", required = true) String xMedium,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 5) @Parameter(name = "x-app", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-app", required = true) String xApp,
        @NotNull @Size(max = 100) @Parameter(name = "x-session", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-session", required = true) String xSession,
        @Parameter(name = "Customer", description = "Customer data to update", required = true) @Valid @RequestBody Mono<Customer> customer,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );

}
